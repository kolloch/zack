[workspace]
resolver = "2"
members = [
    "cli",
    "directories",
    "loader",
    "migration",
    "playground",
    "rules",
    "zaun",
    "zopf",
    "zisch",
    "exec",
    "zwischen",
    "zwirn",
    "zwischen",
]

[workspace.package]
edition = "2024"
rust-version = "1.85.0"

[workspace.dependencies]

# workspace
directories = { path = "directories" }
zaun = { path = "zaun" }
migration = { path = "migration" }

allocative = { version = "0.3" }
starlark = { version = "0.13.0" }

include_dir = "0.7.4"

# data types
url = { version = "2.5.4", features = ["serde"] }
chrono = { version = "0.4.39", features = ["serde"] }
uuid = { version = "1.13.2", features = ["serde", "v4", "v7"] }
# UTF-8 only Paths
camino = { version = "1.1.9", features = ["serde1", "proptest1"] }

# serialization
serde = { version = "1.0.218", features = ["derive"] }
serde_json = "1.0.139"
# https://github.com/engineerd/cjson
# Alternative: https://github.com/Internet-of-People/iop-rs/tree/develop/json-digest
cjson = "0.1.2"
prost = { version = "0.14.1", features = ["codegen"] }
bincode = { version = "2.0.1", features = ["serde"] }

# data structures
# https://docs.rs/ahash/latest/ahash/
ahash = "0.8.11"
anymap2 = "0.13.0"

# error handling
thiserror = "2.0.11"
anyhow = "1.0.96"

# system
nix = { version = "0.29", features = [
    "mount",
    "fs",
    "fanotify",
    "inotify",
    "resource",
    "sched",
    "user",
    "hostname",
] }
sys-mount = { version = "3" }
caps = "0.5.5"

# fs
ignore = { version = "0.4", features = ["simd-accel"] }

# crypto
blake3 = { version = "1.8", features = ["serde", "rayon"] }

# utility
dupe = "0.9.1"
quote = "1.0.38"
tempfile = "3.17.1"
regex = "1"
indoc = "2"
derive_more = { version = "2", features = ["full"] }
either = "1"

# logging & instrumentation
tracing = { version = "0.1.41", features = ["log"] }
tracing-subscriber = { version = "0.3.19", features = ["fmt", "env-filter"] }
tracing-log = "0.2.0"

# cli
bpaf = { version = "0.9.16", features = ["derive"] }

# tui
# https://github.com/ratatui/ratatui
ratatui = "0.29.0"
# Colored command output
# https://github.com/ratatui/ansi-to-tui
# vterm widget for ratatui:
# https://github.com/a-kenji/tui-term

# sync / parallelize
rayon = "1.10"
once_cell = "1"

# dev
prop-test = "0.1.1"

# compression
zstd = "0.13.0"
async-compression = { version = "0.4.22", features = ["zstd"] }

dotenvy = "0.15"

sqlx = { version = "0.8", features = [
    "runtime-tokio",
    "sqlite",
    "derive",
    "migrate",
    "uuid",
] }
sea-orm = { version = "1.1.0", features = [
    "sqlx-sqlite",
    "runtime-tokio-rustls",
    "macros",
    "with-chrono",
    "with-time",
    "with-json",
    "with-uuid",
] }
sea-orm-migration = { version = "1.1.0", features = [
    "sqlx-sqlite",
    "runtime-tokio-rustls",
] }

tokio = { version = "1.44.2", features = ["full"] }
async-std = { version = "1", features = ["attributes", "tokio1"] }

# Calling cargo
escargot = "0.5.15"

# testing
assert-cmd = "2.0.17"
assert-fs = "1.1.3"
predicates = "3.13"
